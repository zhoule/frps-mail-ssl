#!/bin/bash

# FRPS + Nginx SSL ‰∏ÄÈîÆÈÉ®ÁΩ≤ËÑöÊú¨
# ÊîØÊåÅÈõ∂ÈÖçÁΩÆÈÉ®ÁΩ≤ nginx + frps ÊúçÂä°

set -e

SCRIPT_VERSION="1.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# È¢úËâ≤ËæìÂá∫
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Êó•ÂøóÂáΩÊï∞
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1" | tee -a "$SCRIPT_DIR/logs/deploy.log"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" | tee -a "$SCRIPT_DIR/logs/deploy.log"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$SCRIPT_DIR/logs/deploy.log"
}

log_debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1" | tee -a "$SCRIPT_DIR/logs/deploy.log"
}

# ÊòæÁ§∫Ê®™ÂπÖ
show_banner() {
    echo -e "${CYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë            FRPS + Nginx SSL ‰∏ÄÈîÆÈÉ®ÁΩ≤Á≥ªÁªü                  ‚ïë
‚ïë                                                          ‚ïë
‚ïë  üöÄ FRPSÂÜÖÁΩëÁ©øÈÄèÊúçÂä° + SSL                               ‚ïë
‚ïë  üåê NginxÂèçÂêë‰ª£ÁêÜ + Ëá™Âä®SSLËØÅ‰π¶                          ‚ïë
‚ïë  üîÑ Let's EncryptËá™Âä®Áª≠Á≠æ                                ‚ïë
‚ïë  üé® Ëá™ÂÆö‰πâ404ÈîôËØØÈ°µÈù¢                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    echo -e "${PURPLE}Version: $SCRIPT_VERSION${NC}"
    echo ""
}

# Ê£ÄÊü•‰æùËµñ
check_dependencies() {
    log_info "Ê£ÄÊü•Á≥ªÁªü‰æùËµñ..."
    
    local missing_deps=()
    local need_install=false
    
    # Ê£ÄÊü•Docker
    if ! command -v docker &> /dev/null; then
        missing_deps+=("docker")
        need_install=true
    fi
    
    # Ê£ÄÊü•Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        missing_deps+=("docker-compose")
        need_install=true
    fi
    
    # Ê£ÄÊü•ÂÖ∂‰ªñÂøÖË¶ÅÂ∑•ÂÖ∑
    for tool in curl wget openssl; do
        if ! command -v $tool &> /dev/null; then
            missing_deps+=("$tool")
            need_install=true
        fi
    done
    
    if [ "$need_install" = true ]; then
        log_warn "Áº∫Â∞ë‰ª•‰∏ã‰æùËµñ: ${missing_deps[*]}"
        echo ""
        echo -e "${YELLOW}ÊòØÂê¶Ëá™Âä®ÂÆâË£ÖÁº∫Â∞ëÁöÑ‰æùËµñÔºü${NC}"
        echo -e "${BLUE}ÊèêÁ§∫: ÂÆâË£ÖËÑöÊú¨ÊîØÊåÅ Ubuntu/Debian/CentOS/RHEL${NC}"
        echo ""
        read -p "Ëá™Âä®ÂÆâË£Ö‰æùËµñ? (Y/n) " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
            log_info "ÂºÄÂßãËá™Âä®ÂÆâË£Ö‰æùËµñ..."
            if [ -x "$SCRIPT_DIR/install-dependencies.sh" ]; then
                "$SCRIPT_DIR/install-dependencies.sh" --quick
                
                # ÈáçÊñ∞Ê£ÄÊü•
                if ! command -v docker &> /dev/null || ! docker info &> /dev/null; then
                    log_error "‰æùËµñÂÆâË£ÖÂèØËÉΩÊú™ÂÆåÊàêÔºåËØ∑ÊâãÂä®Ê£ÄÊü•"
                    exit 1
                fi
                
                log_info "‰æùËµñÂÆâË£ÖÂÆåÊàêÔºåÁªßÁª≠ÈÉ®ÁΩ≤..."
            else
                log_error "Êâæ‰∏çÂà∞‰æùËµñÂÆâË£ÖËÑöÊú¨"
                exit 1
            fi
        else
            log_error "ËØ∑ÊâãÂä®ÂÆâË£Ö‰æùËµñÂêéÈáçÊñ∞ËøêË°å"
            echo ""
            echo "ÊÇ®ÂèØ‰ª•ËøêË°å‰ª•‰∏ãÂëΩ‰ª§ÂÆâË£Ö‰æùËµñ:"
            echo "  ./install-dependencies.sh"
            echo ""
            echo "ÊàñÊâãÂä®ÂÆâË£Ö:"
            echo "  Ubuntu/Debian: sudo apt install -y docker.io docker-compose curl wget openssl"
            echo "  CentOS/RHEL: sudo yum install -y docker docker-compose curl wget openssl"
            echo ""
            exit 1
        fi
    else
        # Ê£ÄÊü•DockerÊúçÂä°Áä∂ÊÄÅ
        if ! docker info &> /dev/null; then
            log_warn "DockerÊúçÂä°Êú™ËøêË°å"
            echo ""
            read -p "ÊòØÂê¶ÂêØÂä®DockerÊúçÂä°? (Y/n) " -n 1 -r
            echo
            
            if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
                if command -v systemctl &> /dev/null; then
                    sudo systemctl start docker
                    sudo systemctl enable docker
                    log_info "DockerÊúçÂä°Â∑≤ÂêØÂä®"
                else
                    log_error "Êó†Ê≥ïËá™Âä®ÂêØÂä®DockerÊúçÂä°ÔºåËØ∑ÊâãÂä®ÂêØÂä®"
                    exit 1
                fi
            else
                log_error "DockerÊúçÂä°Êú™ËøêË°åÔºåÊó†Ê≥ïÁªßÁª≠"
                exit 1
            fi
        fi
        
        log_info "‰æùËµñÊ£ÄÊü•ÈÄöËøá"
    fi
}

# ÁîüÊàêFRPSÈÖçÁΩÆ
generate_frps_config() {
    local frps_domain=$1
    local frps_token=${2:-$(openssl rand -hex 16)}
    local dashboard_user=${3:-admin}
    local dashboard_pwd=${4:-$(openssl rand -hex 12)}
    
    log_info "ÁîüÊàêFRPSÈÖçÁΩÆ..."
    
    cat > "$SCRIPT_DIR/frps/config/frps.toml" << EOF
# FRPS ÈÖçÁΩÆÊñá‰ª∂

# Âü∫Á°ÄÈÖçÁΩÆ
bindPort = 7000
bindAddr = "0.0.0.0"

# Dashboard ÈÖçÁΩÆ
webServer.addr = "0.0.0.0"
webServer.port = 7001
webServer.user = "$dashboard_user"
webServer.password = "$dashboard_pwd"

# Ëá™ÂÆö‰πâ404ÈîôËØØÈ°µÈù¢
custom404Page = "/etc/frp/custom_errors/404.html"

# Êó•ÂøóÈÖçÁΩÆ
log.to = "/var/log/frps/frps.log"
log.level = "info"
log.maxDays = 3

# ËÆ§ËØÅÈÖçÁΩÆ
auth.method = "token"
auth.token = "$frps_token"

# ËøûÊé•Ê±†
transport.maxPoolCount = 5

# ÂøÉË∑≥ÈÖçÁΩÆ
transport.heartbeatTimeout = 90

# Á´ØÂè£ÁôΩÂêçÂçïÔºåÂÖÅËÆ∏ÂÆ¢Êà∑Á´ØÁªëÂÆöÁöÑÁ´ØÂè£ËåÉÂõ¥
allowPorts = [
  { start = 2000, end = 3000 },
  { start = 3001, end = 4000 },
  { start = 4001, end = 50000 }
]
EOF
    
    log_info "FRPSÈÖçÁΩÆÁîüÊàêÂÆåÊàê"
    log_info "Token: $frps_token"
    log_info "Dashboard: $dashboard_user / $dashboard_pwd"
}


# ÁîüÊàêNginx‰∏ªÈÖçÁΩÆ
generate_nginx_config() {
    log_info "ÁîüÊàêNginxÈÖçÁΩÆ..."
    
    cat > "$SCRIPT_DIR/nginx/conf/nginx.conf" << 'EOF'
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 64m;

    # Gzip ÂéãÁº©
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # SSL ‰ºòÂåñÈÖçÁΩÆ
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # ÂÆâÂÖ®Â§¥
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;

    include /etc/nginx/conf.d/*.conf;
}
EOF

    # ÁîüÊàêÈªòËÆ§ÈÖçÁΩÆ
    cat > "$SCRIPT_DIR/nginx/conf/conf.d/default.conf" << 'EOF'
server {
    listen 80 default_server;
    server_name _;

    location /.well-known/acme-challenge/ {
        root /usr/share/nginx/html;
    }

    location / {
        return 404;
    }
}
EOF
    
    log_info "NginxÈÖçÁΩÆÁîüÊàêÂÆåÊàê"
}

# ÁîüÊàêÂüüÂêçSSLÈÖçÁΩÆ
generate_domain_ssl_config() {
    local domain=$1
    local service_name=$2
    local service_port=$3
    local config_type=${4:-web}  # web, frps-web, frps-api, mail-web
    
    log_info "ÁîüÊàêÂüüÂêç $domain ÁöÑSSLÈÖçÁΩÆ..."
    
    local upstream_config=""
    local location_config=""
    
    case "$config_type" in
        "frps-web")
            # FRPS Dashboard
            location_config='
    location / {
        proxy_pass http://frps:7001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }'
            ;;
        "frps-api")
            # FRPS HTTP ‰ª£ÁêÜ
            location_config='
    location / {
        proxy_pass http://frps:8880;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }'
            ;;
        *)
            # ÈÄöÁî®WebÊúçÂä°
            location_config="
    location / {
        proxy_pass http://$service_name:$service_port;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }"
            ;;
    esac
    
    cat > "$SCRIPT_DIR/nginx/conf/conf.d/${domain}.conf" << EOF
# HTTP -> HTTPS ÈáçÂÆöÂêë
server {
    listen 80;
    server_name $domain;

    location /.well-known/acme-challenge/ {
        root /usr/share/nginx/html;
    }

    location / {
        return 301 https://\$server_name\$request_uri;
    }
}

# HTTPS ÊúçÂä°Âô®
server {
    listen 443 ssl http2;
    server_name $domain;

    # SSL ËØÅ‰π¶
    ssl_certificate /etc/letsencrypt/live/$domain/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$domain/privkey.pem;

    # HSTS
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Êó•Âøó
    access_log /var/log/nginx/${domain}.access.log main;
    error_log /var/log/nginx/${domain}.error.log;

$location_config
}
EOF
    
    log_info "ÂüüÂêç $domain ÈÖçÁΩÆÁîüÊàêÂÆåÊàê"
}

# Áî≥ËØ∑SSLËØÅ‰π¶
request_ssl_certificate() {
    local domain=$1
    local email=$2
    
    log_info "‰∏∫ÂüüÂêç $domain Áî≥ËØ∑SSLËØÅ‰π¶..."
    
    docker run --rm \
        -v "$SCRIPT_DIR/certbot/data:/etc/letsencrypt" \
        -v "$SCRIPT_DIR/nginx/html:/var/www/html" \
        certbot/certbot certonly \
        --webroot \
        --webroot-path=/var/www/html \
        --email "$email" \
        --agree-tos \
        --no-eff-email \
        --force-renewal \
        --non-interactive \
        -d "$domain"
    
    if [ $? -eq 0 ]; then
        log_info "SSLËØÅ‰π¶Áî≥ËØ∑ÊàêÂäü: $domain"
        return 0
    else
        log_error "SSLËØÅ‰π¶Áî≥ËØ∑Â§±Ë¥•: $domain"
        return 1
    fi
}

# ÂàùÂßãÂåñÈÉ®ÁΩ≤ÁéØÂ¢É
init_deployment() {
    log_info "ÂàùÂßãÂåñÈÉ®ÁΩ≤ÁéØÂ¢É..."
    
    # ÂàõÂª∫Êó•ÂøóÁõÆÂΩï
    mkdir -p "$SCRIPT_DIR/logs"
    touch "$SCRIPT_DIR/logs/deploy.log"
    
    # ÁîüÊàêÂü∫Á°ÄÈÖçÁΩÆ
    generate_nginx_config
    
    log_info "ÁéØÂ¢ÉÂàùÂßãÂåñÂÆåÊàê"
}

# ÈÉ®ÁΩ≤ÊúçÂä°
deploy_services() {
    local frps_domain=$1
    local frps_dashboard_domain=$2
    local admin_email=$3
    local frps_token=${4:-$(openssl rand -hex 16)}
    local dashboard_user=${5:-admin}
    local dashboard_pwd=${6:-$(openssl rand -hex 12)}
    
    if [ -z "$frps_domain" ] || [ -z "$admin_email" ]; then
        log_error "ÂèÇÊï∞‰∏çÂÆåÊï¥"
        show_usage
        exit 1
    fi
    
    log_info "ÂºÄÂßãÈÉ®ÁΩ≤ÊúçÂä°..."
    
    # 1. ÁîüÊàêÊúçÂä°ÈÖçÁΩÆ
    generate_frps_config "$frps_domain" "$frps_token" "$dashboard_user" "$dashboard_pwd"
    
    # 2. ÂêØÂä®Âü∫Á°ÄÊúçÂä°
    log_info "ÂêØÂä®Âü∫Á°ÄÊúçÂä°..."
    docker-compose -f "$SCRIPT_DIR/docker-compose.yml" up -d nginx frps
    
    # Á≠âÂæÖÊúçÂä°ÂêØÂä®
    sleep 10
    
    # 3. ÈÖçÁΩÆÂüüÂêçÂíåÁî≥ËØ∑ËØÅ‰π¶
    local domains=("$frps_domain")
    if [ -n "$frps_dashboard_domain" ]; then
        domains+=("$frps_dashboard_domain")
    fi
    
    for domain in "${domains[@]}"; do
        log_info "ÈÖçÁΩÆÂüüÂêç: $domain"
        
        # ÁîüÊàênginxÈÖçÁΩÆ
        case "$domain" in
            "$frps_dashboard_domain")
                generate_domain_ssl_config "$domain" "frps" "7001" "frps-web"
                ;;
            "$frps_domain")
                generate_domain_ssl_config "$domain" "frps" "8880" "frps-api"
                ;;
        esac
        
        # ÈáçÊñ∞Âä†ËΩΩnginx
        docker exec nginx-proxy nginx -s reload
        
        # Áî≥ËØ∑ËØÅ‰π¶
        if request_ssl_certificate "$domain" "$admin_email"; then
            log_info "ÂüüÂêç $domain ÈÖçÁΩÆÂÆåÊàê"
        else
            log_error "ÂüüÂêç $domain ËØÅ‰π¶Áî≥ËØ∑Â§±Ë¥•"
        fi
        
        sleep 5
    done
    
    # 4. ÊúÄÁªàÈáçÂêØÊâÄÊúâÊúçÂä°
    log_info "ÈáçÂêØÊâÄÊúâÊúçÂä°‰ª•Â∫îÁî®SSLÈÖçÁΩÆ..."
    docker-compose -f "$SCRIPT_DIR/docker-compose.yml" restart
    
    # 5. ÊòæÁ§∫ÈÉ®ÁΩ≤ÁªìÊûú
    echo ""
    echo -e "${GREEN}üéâ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ${NC}"
    echo ""
    echo -e "${CYAN}ÊúçÂä°ËÆøÈóÆÂú∞ÂùÄ:${NC}"
    echo -e "  FRPSÊúçÂä°: ${YELLOW}https://$frps_domain${NC}"
    if [ -n "$frps_dashboard_domain" ]; then
        echo -e "  FRPSÁÆ°ÁêÜ: ${YELLOW}https://$frps_dashboard_domain${NC} (${dashboard_user}/${dashboard_pwd})"
    fi
    echo ""
    echo -e "${CYAN}FRPSÈÖçÁΩÆ‰ø°ÊÅØ:${NC}"
    echo -e "  Token: ${YELLOW}$frps_token${NC}"
    echo -e "  ÊúçÂä°Âô®: ${YELLOW}$frps_domain:7000${NC}"
    echo ""
}

# Áª≠Á≠æËØÅ‰π¶
renew_certificates() {
    log_info "Áª≠Á≠æSSLËØÅ‰π¶..."
    
    docker run --rm \
        -v "$SCRIPT_DIR/certbot/data:/etc/letsencrypt" \
        -v "$SCRIPT_DIR/nginx/html:/var/www/html" \
        certbot/certbot renew \
        --quiet \
        --no-random-sleep-on-renew
    
    if [ $? -eq 0 ]; then
        log_info "ËØÅ‰π¶Áª≠Á≠æÂÆåÊàê"
        if docker ps | grep -q nginx-proxy; then
            docker exec nginx-proxy nginx -s reload
            log_info "NginxÂ∑≤ÈáçÊñ∞Âä†ËΩΩ"
        fi
    else
        log_error "ËØÅ‰π¶Áª≠Á≠æÂ§±Ë¥•"
    fi
}

# ËÆæÁΩÆËá™Âä®Áª≠Á≠æ
setup_auto_renew() {
    log_info "ËÆæÁΩÆËá™Âä®Áª≠Á≠æ..."
    
    cat > "$SCRIPT_DIR/renew.sh" << EOF
#!/bin/bash
cd "$SCRIPT_DIR"
./deploy.sh renew >> logs/ssl-renew.log 2>&1
EOF
    
    chmod +x "$SCRIPT_DIR/renew.sh"
    
    echo ""
    echo -e "${YELLOW}ËØ∑Ê∑ªÂä†‰ª•‰∏ãcrontab‰ªªÂä°ÂêØÁî®Ëá™Âä®Áª≠Á≠æ:${NC}"
    echo -e "${CYAN}0 2 * * 0 $SCRIPT_DIR/renew.sh${NC}"
    echo ""
    echo -e "${YELLOW}ÊàñËøêË°åÂëΩ‰ª§Ëá™Âä®Ê∑ªÂä†:${NC}"
    echo -e "${CYAN}echo '0 2 * * 0 $SCRIPT_DIR/renew.sh' | crontab -${NC}"
    echo ""
}

# ÊòæÁ§∫Áä∂ÊÄÅ
show_status() {
    echo ""
    echo -e "${CYAN}=== ÊúçÂä°Áä∂ÊÄÅ ===${NC}"
    echo ""
    
    # DockerÊúçÂä°Áä∂ÊÄÅ
    if docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(nginx-proxy|frps-server|NAMES)"; then
        echo ""
    else
        echo "  Ê≤°ÊúâËøêË°åÁöÑÊúçÂä°"
        echo ""
    fi
    
    # ËØÅ‰π¶Áä∂ÊÄÅ
    echo -e "${CYAN}=== SSLËØÅ‰π¶Áä∂ÊÄÅ ===${NC}"
    if [ -d "$SCRIPT_DIR/certbot/data/live" ] && [ "$(ls -A $SCRIPT_DIR/certbot/data/live 2>/dev/null)" ]; then
        for cert_dir in "$SCRIPT_DIR/certbot/data/live"/*; do
            if [ -d "$cert_dir" ]; then
                domain=$(basename "$cert_dir")
                if [ "$domain" != "README" ]; then
                    expiry=$(openssl x509 -in "$cert_dir/cert.pem" -noout -enddate 2>/dev/null | cut -d= -f2)
                    echo "  $domain: $expiry"
                fi
            fi
        done
    else
        echo "  Ê≤°ÊúâSSLËØÅ‰π¶"
    fi
    echo ""
}

# ÊòæÁ§∫Áî®Ê≥ï
show_usage() {
    cat << EOF
${CYAN}FRPS + Nginx SSL ‰∏ÄÈîÆÈÉ®ÁΩ≤Á≥ªÁªü${NC}

${CYAN}Áî®Ê≥ï:${NC}
    $0 init                                 ÂàùÂßãÂåñÁéØÂ¢É
    $0 deploy <frpsÂüüÂêç> <ÈÇÆÁÆ±>              ÈÉ®ÁΩ≤ÊâÄÊúâÊúçÂä°
    $0 deploy <frpsÂüüÂêç> <dashboardÂüüÂêç> <ÈÇÆÁÆ±>  ÈÉ®ÁΩ≤ÂåÖÂê´dashboard
    $0 renew                                Áª≠Á≠æËØÅ‰π¶
    $0 setup-cron                           ËÆæÁΩÆËá™Âä®Áª≠Á≠æ
    $0 status                               ÊòæÁ§∫Áä∂ÊÄÅ

${CYAN}Á§∫‰æã:${NC}
    $0 init
    $0 deploy frps.example.com admin@example.com
    $0 deploy frps.example.com admin.example.com admin@example.com
    $0 renew
    $0 status

${CYAN}ËØ¥Êòé:${NC}
    - frpsÂüüÂêç: FRPSÊúçÂä°ËÆøÈóÆÂüüÂêç
    - dashboardÂüüÂêç: FRPSÁÆ°ÁêÜÁïåÈù¢ÂüüÂêç (ÂèØÈÄâ)
    - ÈÇÆÁÆ±: Let's EncryptÊ≥®ÂÜåÈÇÆÁÆ±
EOF
}

# ‰∏ªÂáΩÊï∞
main() {
    show_banner
    
    case "${1:-help}" in
        "init")
            check_dependencies
            init_deployment
            log_info "üéâ ÂàùÂßãÂåñÂÆåÊàê! Áé∞Âú®ÂèØ‰ª•‰ΩøÁî® deploy ÂëΩ‰ª§ÈÉ®ÁΩ≤ÊúçÂä°"
            ;;
        "deploy")
            check_dependencies
            init_deployment
            # Âà§Êñ≠ÂèÇÊï∞‰∏™Êï∞
            if [ $# -eq 3 ]; then
                # deploy frps.example.com admin@example.com
                deploy_services "$2" "" "$3"
            elif [ $# -eq 4 ]; then
                # deploy frps.example.com admin.example.com admin@example.com
                deploy_services "$2" "$3" "$4"
            else
                log_error "ÂèÇÊï∞‰∏çÊ≠£Á°Æ"
                show_usage
                exit 1
            fi
            ;;
        "renew")
            renew_certificates
            ;;
        "setup-cron")
            setup_auto_renew
            ;;
        "status")
            show_status
            ;;
        "help"|*)
            show_usage
            ;;
    esac
}

main "$@"